// Generated by gencpp from file deepracer_msgs/Progress.msg
// DO NOT EDIT!


#ifndef DEEPRACER_MSGS_MESSAGE_PROGRESS_H
#define DEEPRACER_MSGS_MESSAGE_PROGRESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace deepracer_msgs
{
template <class ContainerAllocator>
struct Progress_
{
  typedef Progress_<ContainerAllocator> Type;

  Progress_()
    : header()
    , off_track(0)
    , progress(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , distance_from_border_1(0.0)
    , distance_from_border_2(0.0)
    , distance_from_center(0.0)  {
    }
  Progress_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , off_track(0)
    , progress(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , distance_from_border_1(0.0)
    , distance_from_border_2(0.0)
    , distance_from_center(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _off_track_type;
  _off_track_type off_track;

   typedef double _progress_type;
  _progress_type progress;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _distance_from_border_1_type;
  _distance_from_border_1_type distance_from_border_1;

   typedef double _distance_from_border_2_type;
  _distance_from_border_2_type distance_from_border_2;

   typedef double _distance_from_center_type;
  _distance_from_center_type distance_from_center;





  typedef boost::shared_ptr< ::deepracer_msgs::Progress_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_msgs::Progress_<ContainerAllocator> const> ConstPtr;

}; // struct Progress_

typedef ::deepracer_msgs::Progress_<std::allocator<void> > Progress;

typedef boost::shared_ptr< ::deepracer_msgs::Progress > ProgressPtr;
typedef boost::shared_ptr< ::deepracer_msgs::Progress const> ProgressConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_msgs::Progress_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_msgs::Progress_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_msgs::Progress_<ContainerAllocator1> & lhs, const ::deepracer_msgs::Progress_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.off_track == rhs.off_track &&
    lhs.progress == rhs.progress &&
    lhs.yaw == rhs.yaw &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.distance_from_border_1 == rhs.distance_from_border_1 &&
    lhs.distance_from_border_2 == rhs.distance_from_border_2 &&
    lhs.distance_from_center == rhs.distance_from_center;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_msgs::Progress_<ContainerAllocator1> & lhs, const ::deepracer_msgs::Progress_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::Progress_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::Progress_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::Progress_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::Progress_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::Progress_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::Progress_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_msgs::Progress_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e96c60678c296b3091cb64154018f379";
  }

  static const char* value(const ::deepracer_msgs::Progress_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe96c60678c296b30ULL;
  static const uint64_t static_value2 = 0x91cb64154018f379ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_msgs::Progress_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_msgs/Progress";
  }

  static const char* value(const ::deepracer_msgs::Progress_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_msgs::Progress_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8 off_track\n"
"float64 progress\n"
"float64 yaw\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 distance_from_border_1\n"
"float64 distance_from_border_2\n"
"float64 distance_from_center\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::deepracer_msgs::Progress_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_msgs::Progress_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.off_track);
      stream.next(m.progress);
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.distance_from_border_1);
      stream.next(m.distance_from_border_2);
      stream.next(m.distance_from_center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Progress_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_msgs::Progress_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_msgs::Progress_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "off_track: ";
    Printer<int8_t>::stream(s, indent + "  ", v.off_track);
    s << indent << "progress: ";
    Printer<double>::stream(s, indent + "  ", v.progress);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "distance_from_border_1: ";
    Printer<double>::stream(s, indent + "  ", v.distance_from_border_1);
    s << indent << "distance_from_border_2: ";
    Printer<double>::stream(s, indent + "  ", v.distance_from_border_2);
    s << indent << "distance_from_center: ";
    Printer<double>::stream(s, indent + "  ", v.distance_from_center);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_MSGS_MESSAGE_PROGRESS_H
